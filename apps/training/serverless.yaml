service: trainings

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-dotenv-plugin
package:
  excludeDevDependencies: true
  patterns:
    - '!src/**'
    - dist/**
    - '!node_modules/**'
    - '!test/**'

custom:
  serverless-offline:
    httpPort: 3004
    lambdaPort: 3006
  serverless-dynamodb:
    start:
      port: 8000
      docker: false
      seed: true
      migrate: true

functions:
  getTrainings:
    handler: dist/training/src/lambdas/get-trainings.getTrainings
    events:
      - http:
          method: get
          path: /trainings
          cors: true
  postTraining:
    handler: dist/training/src/lambdas/post-training.postTraining
    events:
      - http:
          method: post
          path: /trainings
          cors: true
  searchTrainings:
    handler: dist/training/src/lambdas/search-trainings.searchTrainings
    events:
      - http:
          method: get
          path: /trainings/search
          cors: true

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs18.x
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    LOCAL_ENDPOINT: ${env:LOCAL_ENDPOINT}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:UpdateItem
          Resource:
            - 'arn:aws:dynamodb:us-east-1:471112551028:table/trainings'
